=begin
#Metronome API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: info@privatedataservices.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Metronome::PolicyManagementApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PolicyManagementApi' do
  before do
    # run before each test
    @api_instance = Metronome::PolicyManagementApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PolicyManagementApi' do
    it 'should create an instance of PolicyManagementApi' do
      expect(@api_instance).to be_instance_of(Metronome::PolicyManagementApi)
    end
  end

  # unit tests for get_many_policies
  # Read many policies alphanumerically sorted
  # @param [Hash] opts the optional parameters
  # @option opts [String] :prefix 
  # @option opts [Integer] :offset The number of policies to drop from the start
  # @option opts [Integer] :limit The number of policies to include
  # @option opts [Boolean] :include_data Whether to include aging-strategy, aging-offset-amount, aging-offset-unit etc.
  # @return [GetManyPolicies200Response]
  describe 'get_many_policies test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy
  # Read a specific policy
  # @param policy_id 
  # @param [Hash] opts the optional parameters
  # @return [PolicyData]
  describe 'get_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_log
  # Read a specific policy&#39;s access log
  # @param policy_id 
  # @param [Hash] opts the optional parameters
  # @return [PolicyData]
  describe 'get_policy_log test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_members
  # Read the items and sub-items that have been used for a specific policy
  # @param policy_id 
  # @param [Hash] opts the optional parameters
  # @return [PolicyData]
  describe 'get_policy_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for put_policy
  # Create or modify a policy
  # @param policy_id The name of the policy to be created
  # @param [Hash] opts the optional parameters
  # @option opts [CreateOrModifyPolicyRequest] :create_or_modify_policy_request 
  # @return [CreateOrModifyPolicyResponse]
  describe 'put_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
