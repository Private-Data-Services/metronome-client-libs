=begin
#Metronome API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: info@privatedataservices.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module Metronome
  class PolicyManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Read many policies alphanumerically sorted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :prefix 
    # @option opts [Integer] :offset The number of policies to drop from the start
    # @option opts [Integer] :limit The number of policies to include
    # @option opts [Boolean] :include_data Whether to include aging-strategy, aging-offset-amount, aging-offset-unit etc.
    # @return [GetManyPolicies200Response]
    def get_many_policies(opts = {})
      data, _status_code, _headers = get_many_policies_with_http_info(opts)
      data
    end

    # Read many policies alphanumerically sorted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :prefix 
    # @option opts [Integer] :offset The number of policies to drop from the start
    # @option opts [Integer] :limit The number of policies to include
    # @option opts [Boolean] :include_data Whether to include aging-strategy, aging-offset-amount, aging-offset-unit etc.
    # @return [Array<(GetManyPolicies200Response, Integer, Hash)>] GetManyPolicies200Response data, response status code and response headers
    def get_many_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyManagementApi.get_many_policies ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 1
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling PolicyManagementApi.get_many_policies, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PolicyManagementApi.get_many_policies, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v1/metronome/policies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'prefix'] = opts[:'prefix'] if !opts[:'prefix'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'include-data'] = opts[:'include_data'] if !opts[:'include_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetManyPolicies200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PolicyManagementApi.get_many_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyManagementApi#get_many_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a specific policy
    # @param policy_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PolicyData]
    def get_policy(policy_id, opts = {})
      data, _status_code, _headers = get_policy_with_http_info(policy_id, opts)
      data
    end

    # Read a specific policy
    # @param policy_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyData, Integer, Hash)>] PolicyData data, response status code and response headers
    def get_policy_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyManagementApi.get_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyManagementApi.get_policy"
      end
      # resource path
      local_var_path = '/v1/metronome/policies/{policy-id}'.sub('{' + 'policy-id' + '}', CGI.escape(policy_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PolicyData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PolicyManagementApi.get_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyManagementApi#get_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a specific policy's access log
    # @param policy_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PolicyData]
    def get_policy_log(policy_id, opts = {})
      data, _status_code, _headers = get_policy_log_with_http_info(policy_id, opts)
      data
    end

    # Read a specific policy&#39;s access log
    # @param policy_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyData, Integer, Hash)>] PolicyData data, response status code and response headers
    def get_policy_log_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyManagementApi.get_policy_log ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyManagementApi.get_policy_log"
      end
      # resource path
      local_var_path = '/v1/metronome/policies/{policy-id}/log'.sub('{' + 'policy-id' + '}', CGI.escape(policy_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PolicyData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PolicyManagementApi.get_policy_log",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyManagementApi#get_policy_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read the items and sub-items that have been used for a specific policy
    # @param policy_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PolicyData]
    def get_policy_members(policy_id, opts = {})
      data, _status_code, _headers = get_policy_members_with_http_info(policy_id, opts)
      data
    end

    # Read the items and sub-items that have been used for a specific policy
    # @param policy_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyData, Integer, Hash)>] PolicyData data, response status code and response headers
    def get_policy_members_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyManagementApi.get_policy_members ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyManagementApi.get_policy_members"
      end
      # resource path
      local_var_path = '/v1/metronome/policies/{policy-id}/members'.sub('{' + 'policy-id' + '}', CGI.escape(policy_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PolicyData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PolicyManagementApi.get_policy_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyManagementApi#get_policy_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or modify a policy
    # @param policy_id [String] The name of the policy to be created
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOrModifyPolicyRequest] :create_or_modify_policy_request 
    # @return [CreateOrModifyPolicyResponse]
    def put_policy(policy_id, opts = {})
      data, _status_code, _headers = put_policy_with_http_info(policy_id, opts)
      data
    end

    # Create or modify a policy
    # @param policy_id [String] The name of the policy to be created
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOrModifyPolicyRequest] :create_or_modify_policy_request 
    # @return [Array<(CreateOrModifyPolicyResponse, Integer, Hash)>] CreateOrModifyPolicyResponse data, response status code and response headers
    def put_policy_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyManagementApi.put_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyManagementApi.put_policy"
      end
      # resource path
      local_var_path = '/v1/metronome/policies/{policy-id}'.sub('{' + 'policy-id' + '}', CGI.escape(policy_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_or_modify_policy_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateOrModifyPolicyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PolicyManagementApi.put_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyManagementApi#put_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
