=begin
#Metronome API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: info@privatedataservices.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module Metronome
  class AccessManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Read a specific API key
    # @param api_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApiKeyData]
    def get_api_key(api_key, opts = {})
      data, _status_code, _headers = get_api_key_with_http_info(api_key, opts)
      data
    end

    # Read a specific API key
    # @param api_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiKeyData, Integer, Hash)>] ApiKeyData data, response status code and response headers
    def get_api_key_with_http_info(api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessManagementApi.get_api_key ...'
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling AccessManagementApi.get_api_key"
      end
      # resource path
      local_var_path = '/v1/metronome/api-keys/{api-key}'.sub('{' + 'api-key' + '}', CGI.escape(api_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiKeyData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccessManagementApi.get_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessManagementApi#get_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read many API keys alphanumerically sorted
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of keys to drop from the start
    # @option opts [Integer] :limit The number of keys to include
    # @option opts [Boolean] :include_data Whether to include permissions, status, description etc.
    # @return [GetManyApiKeys200Response]
    def get_many_api_keys(opts = {})
      data, _status_code, _headers = get_many_api_keys_with_http_info(opts)
      data
    end

    # Read many API keys alphanumerically sorted
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of keys to drop from the start
    # @option opts [Integer] :limit The number of keys to include
    # @option opts [Boolean] :include_data Whether to include permissions, status, description etc.
    # @return [Array<(GetManyApiKeys200Response, Integer, Hash)>] GetManyApiKeys200Response data, response status code and response headers
    def get_many_api_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessManagementApi.get_many_api_keys ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 1
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling AccessManagementApi.get_many_api_keys, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AccessManagementApi.get_many_api_keys, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v1/metronome/api-keys'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'include-data'] = opts[:'include_data'] if !opts[:'include_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetManyApiKeys200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccessManagementApi.get_many_api_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessManagementApi#get_many_api_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or modify an API key
    # @param api_key [String] The API key to be modified or &#39;create&#39; for a new key
    # @param [Hash] opts the optional parameters
    # @option opts [PutApiKeyRequest] :put_api_key_request 
    # @return [CreateOrModifyApiKeyResponse]
    def put_api_key(api_key, opts = {})
      data, _status_code, _headers = put_api_key_with_http_info(api_key, opts)
      data
    end

    # Create or modify an API key
    # @param api_key [String] The API key to be modified or &#39;create&#39; for a new key
    # @param [Hash] opts the optional parameters
    # @option opts [PutApiKeyRequest] :put_api_key_request 
    # @return [Array<(CreateOrModifyApiKeyResponse, Integer, Hash)>] CreateOrModifyApiKeyResponse data, response status code and response headers
    def put_api_key_with_http_info(api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessManagementApi.put_api_key ...'
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling AccessManagementApi.put_api_key"
      end
      # resource path
      local_var_path = '/v1/metronome/api-keys/{api-key}'.sub('{' + 'api-key' + '}', CGI.escape(api_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_api_key_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateOrModifyApiKeyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccessManagementApi.put_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessManagementApi#put_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Open end point for signing up new customers
    # @param [Hash] opts the optional parameters
    # @option opts [SignupRequest] :signup_request 
    # @return [SignupResponse]
    def sign_up(opts = {})
      data, _status_code, _headers = sign_up_with_http_info(opts)
      data
    end

    # Open end point for signing up new customers
    # @param [Hash] opts the optional parameters
    # @option opts [SignupRequest] :signup_request 
    # @return [Array<(SignupResponse, Integer, Hash)>] SignupResponse data, response status code and response headers
    def sign_up_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessManagementApi.sign_up ...'
      end
      # resource path
      local_var_path = '/v1/metronome/sign-up'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'signup_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SignupResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AccessManagementApi.sign_up",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessManagementApi#sign_up\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
