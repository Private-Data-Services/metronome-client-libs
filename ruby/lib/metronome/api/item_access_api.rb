=begin
#Metronome API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: info@privatedataservices.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module Metronome
  class ItemAccessApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Expire an item and its sub-items immediately
    # @param item_id [String] The ID of the item being expired
    # @param [Hash] opts the optional parameters
    # @return [ExpireItemResponse]
    def expire_item(item_id, opts = {})
      data, _status_code, _headers = expire_item_with_http_info(item_id, opts)
      data
    end

    # Expire an item and its sub-items immediately
    # @param item_id [String] The ID of the item being expired
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpireItemResponse, Integer, Hash)>] ExpireItemResponse data, response status code and response headers
    def expire_item_with_http_info(item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ItemAccessApi.expire_item ...'
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling ItemAccessApi.expire_item"
      end
      # resource path
      local_var_path = '/v1/metronome/items/{item-id}'.sub('{' + 'item-id' + '}', CGI.escape(item_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExpireItemResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ItemAccessApi.expire_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ItemAccessApi#expire_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Expire a sub-item immediately
    # @param item_id [String] The parent item ID of the sub-item being expired
    # @param sub_item_id [String] The sub-item ID being expired
    # @param [Hash] opts the optional parameters
    # @return [ExpireSubItemResponse]
    def expire_sub_item(item_id, sub_item_id, opts = {})
      data, _status_code, _headers = expire_sub_item_with_http_info(item_id, sub_item_id, opts)
      data
    end

    # Expire a sub-item immediately
    # @param item_id [String] The parent item ID of the sub-item being expired
    # @param sub_item_id [String] The sub-item ID being expired
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpireSubItemResponse, Integer, Hash)>] ExpireSubItemResponse data, response status code and response headers
    def expire_sub_item_with_http_info(item_id, sub_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ItemAccessApi.expire_sub_item ...'
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling ItemAccessApi.expire_sub_item"
      end
      # verify the required parameter 'sub_item_id' is set
      if @api_client.config.client_side_validation && sub_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'sub_item_id' when calling ItemAccessApi.expire_sub_item"
      end
      # resource path
      local_var_path = '/v1/metronome/items/{item-id}/{sub-item-id}'.sub('{' + 'item-id' + '}', CGI.escape(item_id.to_s)).sub('{' + 'sub-item-id' + '}', CGI.escape(sub_item_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExpireSubItemResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ItemAccessApi.expire_sub_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ItemAccessApi#expire_sub_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a specific item's access log
    # @param item_id [String] The ID of the item to be read
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :start_date Mutually exclusive with specifying the specific sub-items to read.
    # @option opts [Boolean] :end_date 
    # @return [ItemOrSubItemAccessLog]
    def get_item_log(item_id, opts = {})
      data, _status_code, _headers = get_item_log_with_http_info(item_id, opts)
      data
    end

    # Read a specific item&#39;s access log
    # @param item_id [String] The ID of the item to be read
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :start_date Mutually exclusive with specifying the specific sub-items to read.
    # @option opts [Boolean] :end_date 
    # @return [Array<(ItemOrSubItemAccessLog, Integer, Hash)>] ItemOrSubItemAccessLog data, response status code and response headers
    def get_item_log_with_http_info(item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ItemAccessApi.get_item_log ...'
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling ItemAccessApi.get_item_log"
      end
      # resource path
      local_var_path = '/v1/metronome/items/{item-id}/log'.sub('{' + 'item-id' + '}', CGI.escape(item_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start-date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end-date'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ItemOrSubItemAccessLog'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ItemAccessApi.get_item_log",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ItemAccessApi#get_item_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a specific item's metadata with or without any sub-items.
    # @param item_id [String] The ID of the item to be read
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :all_sub_items Mutually exclusive with specifying the specific sub-items to read.
    # @option opts [Boolean] :no_item_content 
    # @option opts [Array<String>] :sub_item Mutually exclusive with all-sub-items&#x3D;true.  If you only wish to read a few specific sub-items with this item, include each sub-item name in multiple form parameters eg https://url/v1/metronome/items/customer-123?sub-item&#x3D;email&amp;sub-item&#x3D;mobile-phone&amp;sub-item&#x3D;address
    # @return [ItemMetadataResponse]
    def get_item_metadata(item_id, opts = {})
      data, _status_code, _headers = get_item_metadata_with_http_info(item_id, opts)
      data
    end

    # Read a specific item&#39;s metadata with or without any sub-items.
    # @param item_id [String] The ID of the item to be read
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :all_sub_items Mutually exclusive with specifying the specific sub-items to read.
    # @option opts [Boolean] :no_item_content 
    # @option opts [Array<String>] :sub_item Mutually exclusive with all-sub-items&#x3D;true.  If you only wish to read a few specific sub-items with this item, include each sub-item name in multiple form parameters eg https://url/v1/metronome/items/customer-123?sub-item&#x3D;email&amp;sub-item&#x3D;mobile-phone&amp;sub-item&#x3D;address
    # @return [Array<(ItemMetadataResponse, Integer, Hash)>] ItemMetadataResponse data, response status code and response headers
    def get_item_metadata_with_http_info(item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ItemAccessApi.get_item_metadata ...'
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling ItemAccessApi.get_item_metadata"
      end
      # resource path
      local_var_path = '/v1/metronome/items/{item-id}'.sub('{' + 'item-id' + '}', CGI.escape(item_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'all-sub-items'] = opts[:'all_sub_items'] if !opts[:'all_sub_items'].nil?
      query_params[:'no-item-content'] = opts[:'no_item_content'] if !opts[:'no_item_content'].nil?
      query_params[:'sub-item'] = @api_client.build_collection_param(opts[:'sub_item'], :multi) if !opts[:'sub_item'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ItemMetadataResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ItemAccessApi.get_item_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ItemAccessApi#get_item_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read which policies have been applied to a specific item
    # @param item_id [String] The ID of the item to be read
    # @param [Hash] opts the optional parameters
    # @return [ItemOrSubItemPolicyResponse]
    def get_item_policies(item_id, opts = {})
      data, _status_code, _headers = get_item_policies_with_http_info(item_id, opts)
      data
    end

    # Read which policies have been applied to a specific item
    # @param item_id [String] The ID of the item to be read
    # @param [Hash] opts the optional parameters
    # @return [Array<(ItemOrSubItemPolicyResponse, Integer, Hash)>] ItemOrSubItemPolicyResponse data, response status code and response headers
    def get_item_policies_with_http_info(item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ItemAccessApi.get_item_policies ...'
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling ItemAccessApi.get_item_policies"
      end
      # resource path
      local_var_path = '/v1/metronome/items/{item-id}/policies'.sub('{' + 'item-id' + '}', CGI.escape(item_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ItemOrSubItemPolicyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ItemAccessApi.get_item_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ItemAccessApi#get_item_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a specific sub-item's access log
    # @param item_id [String] The parent item ID of the sub-item being read
    # @param sub_item_id [String] The sub-item ID to be read
    # @param [Hash] opts the optional parameters
    # @return [ItemOrSubItemAccessLog]
    def get_sub_item_log(item_id, sub_item_id, opts = {})
      data, _status_code, _headers = get_sub_item_log_with_http_info(item_id, sub_item_id, opts)
      data
    end

    # Read a specific sub-item&#39;s access log
    # @param item_id [String] The parent item ID of the sub-item being read
    # @param sub_item_id [String] The sub-item ID to be read
    # @param [Hash] opts the optional parameters
    # @return [Array<(ItemOrSubItemAccessLog, Integer, Hash)>] ItemOrSubItemAccessLog data, response status code and response headers
    def get_sub_item_log_with_http_info(item_id, sub_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ItemAccessApi.get_sub_item_log ...'
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling ItemAccessApi.get_sub_item_log"
      end
      # verify the required parameter 'sub_item_id' is set
      if @api_client.config.client_side_validation && sub_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'sub_item_id' when calling ItemAccessApi.get_sub_item_log"
      end
      # resource path
      local_var_path = '/v1/metronome/items/{item-id}/{sub-item-id}/log'.sub('{' + 'item-id' + '}', CGI.escape(item_id.to_s)).sub('{' + 'sub-item-id' + '}', CGI.escape(sub_item_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ItemOrSubItemAccessLog'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ItemAccessApi.get_sub_item_log",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ItemAccessApi#get_sub_item_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a specific sub-item's metadata
    # @param item_id [String] The parent item ID of the sub-item being read
    # @param sub_item_id [String] The sub-item ID to be read
    # @param [Hash] opts the optional parameters
    # @return [SubItemMetadataResponse]
    def get_sub_item_metadata(item_id, sub_item_id, opts = {})
      data, _status_code, _headers = get_sub_item_metadata_with_http_info(item_id, sub_item_id, opts)
      data
    end

    # Read a specific sub-item&#39;s metadata
    # @param item_id [String] The parent item ID of the sub-item being read
    # @param sub_item_id [String] The sub-item ID to be read
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubItemMetadataResponse, Integer, Hash)>] SubItemMetadataResponse data, response status code and response headers
    def get_sub_item_metadata_with_http_info(item_id, sub_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ItemAccessApi.get_sub_item_metadata ...'
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling ItemAccessApi.get_sub_item_metadata"
      end
      # verify the required parameter 'sub_item_id' is set
      if @api_client.config.client_side_validation && sub_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'sub_item_id' when calling ItemAccessApi.get_sub_item_metadata"
      end
      # resource path
      local_var_path = '/v1/metronome/items/{item-id}/{sub-item-id}'.sub('{' + 'item-id' + '}', CGI.escape(item_id.to_s)).sub('{' + 'sub-item-id' + '}', CGI.escape(sub_item_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubItemMetadataResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ItemAccessApi.get_sub_item_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ItemAccessApi#get_sub_item_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read which policies have been applied to a specific sub-item
    # @param item_id [String] The parent item ID of the sub-item being read
    # @param sub_item_id [String] The sub-item ID to be read
    # @param [Hash] opts the optional parameters
    # @return [ItemOrSubItemPolicyResponse]
    def get_sub_item_policies(item_id, sub_item_id, opts = {})
      data, _status_code, _headers = get_sub_item_policies_with_http_info(item_id, sub_item_id, opts)
      data
    end

    # Read which policies have been applied to a specific sub-item
    # @param item_id [String] The parent item ID of the sub-item being read
    # @param sub_item_id [String] The sub-item ID to be read
    # @param [Hash] opts the optional parameters
    # @return [Array<(ItemOrSubItemPolicyResponse, Integer, Hash)>] ItemOrSubItemPolicyResponse data, response status code and response headers
    def get_sub_item_policies_with_http_info(item_id, sub_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ItemAccessApi.get_sub_item_policies ...'
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling ItemAccessApi.get_sub_item_policies"
      end
      # verify the required parameter 'sub_item_id' is set
      if @api_client.config.client_side_validation && sub_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'sub_item_id' when calling ItemAccessApi.get_sub_item_policies"
      end
      # resource path
      local_var_path = '/v1/metronome/items/{item-id}/{sub-item-id}/policies'.sub('{' + 'item-id' + '}', CGI.escape(item_id.to_s)).sub('{' + 'sub-item-id' + '}', CGI.escape(sub_item_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ItemOrSubItemPolicyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ItemAccessApi.get_sub_item_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ItemAccessApi#get_sub_item_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
