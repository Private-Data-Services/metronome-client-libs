=begin
#Metronome API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: info@privatedataservices.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'date'
require 'time'

module Metronome
  class PermissionDeniedResponse
    attr_accessor :error_code

    attr_accessor :customer_status

    attr_accessor :api_key_status

    attr_accessor :granted_permissions

    attr_accessor :required_permission

    attr_accessor :internal_contact

    attr_accessor :message

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'error_code' => :'error-code',
        :'customer_status' => :'customer-status',
        :'api_key_status' => :'api-key-status',
        :'granted_permissions' => :'granted-permissions',
        :'required_permission' => :'required-permission',
        :'internal_contact' => :'internal-contact',
        :'message' => :'message'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'error_code' => :'String',
        :'customer_status' => :'String',
        :'api_key_status' => :'String',
        :'granted_permissions' => :'Array<Permission>',
        :'required_permission' => :'Permission',
        :'internal_contact' => :'String',
        :'message' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Metronome::PermissionDeniedResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Metronome::PermissionDeniedResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'error_code')
        self.error_code = attributes[:'error_code']
      end

      if attributes.key?(:'customer_status')
        self.customer_status = attributes[:'customer_status']
      end

      if attributes.key?(:'api_key_status')
        self.api_key_status = attributes[:'api_key_status']
      end

      if attributes.key?(:'granted_permissions')
        if (value = attributes[:'granted_permissions']).is_a?(Array)
          self.granted_permissions = value
        end
      end

      if attributes.key?(:'required_permission')
        self.required_permission = attributes[:'required_permission']
      end

      if attributes.key?(:'internal_contact')
        self.internal_contact = attributes[:'internal_contact']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @error_code.nil?
        invalid_properties.push('invalid value for "error_code", error_code cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @error_code.nil?
      error_code_validator = EnumAttributeValidator.new('String', ["unknown-customer", "account-restricted", "api-key-lacks-permission"])
      return false unless error_code_validator.valid?(@error_code)
      customer_status_validator = EnumAttributeValidator.new('String', ["read-write", "read-only", "disabled"])
      return false unless customer_status_validator.valid?(@customer_status)
      api_key_status_validator = EnumAttributeValidator.new('String', ["enabled", "disabled"])
      return false unless api_key_status_validator.valid?(@api_key_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error_code Object to be assigned
    def error_code=(error_code)
      validator = EnumAttributeValidator.new('String', ["unknown-customer", "account-restricted", "api-key-lacks-permission"])
      unless validator.valid?(error_code)
        fail ArgumentError, "invalid value for \"error_code\", must be one of #{validator.allowable_values}."
      end
      @error_code = error_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_status Object to be assigned
    def customer_status=(customer_status)
      validator = EnumAttributeValidator.new('String', ["read-write", "read-only", "disabled"])
      unless validator.valid?(customer_status)
        fail ArgumentError, "invalid value for \"customer_status\", must be one of #{validator.allowable_values}."
      end
      @customer_status = customer_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] api_key_status Object to be assigned
    def api_key_status=(api_key_status)
      validator = EnumAttributeValidator.new('String', ["enabled", "disabled"])
      unless validator.valid?(api_key_status)
        fail ArgumentError, "invalid value for \"api_key_status\", must be one of #{validator.allowable_values}."
      end
      @api_key_status = api_key_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          error_code == o.error_code &&
          customer_status == o.customer_status &&
          api_key_status == o.api_key_status &&
          granted_permissions == o.granted_permissions &&
          required_permission == o.required_permission &&
          internal_contact == o.internal_contact &&
          message == o.message
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [error_code, customer_status, api_key_status, granted_permissions, required_permission, internal_contact, message].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Metronome.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
